services:
  # app:
  #   build: 
  #     context: .
  #     args:
  #       - TRACKING_URI=http://tracking_server:5000
  #   environment:
  #     - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
  #     - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
  #   ports:
  #     - '3000:80'
  #   networks:
  #     - monitoring
  #     - backend
  ray-head:
    #image: rayproject/ray:latest
    build: 
      context: .
      dockerfile: ray.Dockerfile
    ports:
      - "${REDISPORT}:${REDISPORT}"
      - "${DASHBOARDPORT}:${DASHBOARDPORT}"
      - "${HEADNODEPORT}:${HEADNODEPORT}"
    env_file:
     - .env
    command: bash -c "ray start --head --dashboard-port=${DASHBOARDPORT} --port=${REDISPORT} --redis-password=${REDISPASSWORD} --dashboard-host=0.0.0.0 --metrics-export-port=8080 --num-cpus=1 && sleep infinity"
    shm_size: 2g
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 3g
    networks:
      - monitoring

  ray-worker:
    build: 
      context: .
      dockerfile: ray.Dockerfile
    depends_on: 
      - ray-head
    env_file:
      - .env
    command: bash -c "ray start --address=ray-head:${REDISPORT} --redis-password=${REDISPASSWORD} --num-cpus=1 --block" 
    shm_size: 2g
    deploy:
      mode: replicated
      replicas: 4
      resources:
        limits:
          cpus: 1
          memory: '2g'
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - "3002:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - monitoring

  db:
    restart: always
    image: postgres:latest
    container_name: mlflow_db
    expose:
      - "${PG_PORT}"
    networks:
      - backend
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DATABASE=${PG_DATABASE}
    volumes:
      - db_data:/var/lib/postgresql/data/

  tracking_server:
    depends_on: 
      - db
      - s3
    restart: always
    build: 
      context: .
      dockerfile: mlflow.Dockerfile
    container_name: mlflow_server
    ports:
      - "${MLFLOW_PORT}:5000"
    networks:
      - frontend
      - backend
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_S3_ENDPOINT_URL=http://s3:${MINIO_PORT}
    command: >
      mlflow server 
      --backend-store-uri postgresql://${PG_USER}:${PG_PASSWORD}@db:${PG_PORT}/${PG_DATABASE}
      --host 0.0.0.0
      --default-artifact-root s3://${MLFLOW_BUCKET_NAME}/  

  s3:
    image: minio/minio
    restart: always
    depends_on:
      - db
    volumes:
        - minio_data:/data
    ports:
      - "${MINIO_PORT}:9000" # means we can do http://localhost:9000
    networks:
      - frontend
      - backend
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data 
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  create_s3_buckets:
    image: minio/mc
    depends_on:
      - "s3"
    entrypoint: >
      /bin/sh -c '
      sleep 5;
      /usr/bin/mc config host add s3 http://s3:${MINIO_PORT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} --api S3v4;
      [[ ! -z "`/usr/bin/mc ls s3 | grep challenge`" ]] || /usr/bin/mc mb s3/${MLFLOW_BUCKET_NAME};
      /usr/bin/mc policy download s3/${MLFLOW_BUCKET_NAME};
      exit 0;
      ' 
    networks:
      - backend

networks:
  monitoring:
    driver: bridge
  frontend:
    driver: bridge
  backend:
    driver: bridge
    
volumes:
  prometheus_data: {}
  db_data:
  minio_data:
  grafana-data:
    driver: local